/**
 * LTCS2 main javascript file.
 * 
 * @author: skwok
 */

function ltcs2() {
	var self = this;
	var refreshRateMs = 3 * 1000;
	self.timer = -99;
	self.failCnt = 0;

	self.getCurrTime = function() {
		return formattedTime(new Date());
	};

	self.callAgainIn = function(func, msecs) {
		if (self.timer != -99)
			clearTimeout(self.timer);
		self.timer = setTimeout(func, msecs);
	};

	self.checkServer = function(labelId, isOK) {
		if (isOK) {
			self.failCnt = 0;
			return;
		}
		self.failCnt += 1;
		if (self.failCnt < 2)
			return;
		var sl = E(labelId);
		if (!sl)
			sl = E("mainView");
		sl.innerHTML = "Fail to connect to server " + self.getCurrTime();
	};

	self.showSchedule = function(data) {
		var i;
		var buf = [];

		var now = new Date();
		var day = now.getDate();
		var month = now.getMonth() + 1;
		var year = now.getFullYear();

		if (day < 10)
			day = '0' + day;
		if (month < 10)
			month = '0' + month;
		var today = year + "-" + month + "-" + day;
		buf.push("<table id='scheduleTable'><tr>");
		buf.push("<th>Date<th>WDay<th>Sites<th>Instruments");
		for (i = 0; i < data.length; ++i) {
			var rowClass = i % 2 == 0 ? "evenRow" : "oddRow";
			var row = data[i];
			var icon = today == row[0] ? "&nbsp;<img src='laser.png'>" : "";
			buf.push("<tr class='" + rowClass + "'>" + "<td width='100'>"
					+ row[0] + "<td width='100'>" + row[1] + "<td width='220'>"
					+ row[2] + icon + "<td width='280'>" + row[3]);
		}
		buf.push("</table>");
		E("mainView").innerHTML = buf.join("");
	};

	self.loadSchedule = function() {
		var callback = function(data) {
			self.showSchedule(data);
		};

		var url = "getSchedule";
		ajaxCall(url, {}, callback);
	};

	self.showStatus = function(data) {
		function showOverrideForm(row) {
			var td = "<td>";
			var link = window.location.pathname + "?c=o&tel="
					+ row['Telescope'];
			return td + "<a href='" + link + "'>Edit</a>";
		}

		function genTelName(row) {
			var tclass = "";
			var td = "<td width='100' ";
			var ltcsURL = row['LTCSURL'];
			var val = row['Telescope'];
			if (row['LTCSSRV_STATE'] == "UP") {
				tclass = "srvUp";
				val = "<a href='" + ltcsURL + "'>" + val + "</a>";
			}
			else {
				if (ltcsURL) val = "<a href='" + ltcsURL + "'>" + val + "</a>"; 
			}

			return td + " class ='" + tclass + "'>" + val;
		}

		function genFov(row, ovr) {
			var td = "<td width='100'>";
			return td + row[ovr + 'FOV'];
		}

		function genLaserImpacted(row, ovr) {
			var td = "<td width='100'> ";
			return td + row[ovr + 'LASER_IMPACTED'];
		}

		function genLaserState(row, ovr) {
			var onSky = row[ovr + 'LASER_STATE'];
			var showLaser = onSky == "ON-SKY" ? "<img id='lsimg' src='laser.png'>"
					: "";
			var td = "<td width='100'> ";
			return td + onSky + showLaser;
		}

		function genTimeStamp(row, ovr) {
			var date = new Date(Number(row['TIMESTAMP']) * 1000);
			var dstr = formattedTime(date);
			var td = "<td > ";
			return td + dstr;
		}

		var name;
		var buf = [];
		var i = 0;
		buf.push("<table id='statusTable'><tr>");
		buf.push("<th>Telescope<th>FOV[deg]" + "<th>Laser Impacted"
				+ "<th>Laser State<th>Time stamp<th>Override");

		for (name in data) {
			var rowClass = i % 2 == 0 ? "upRowEven" : "upRowOdd";
			var row = data[name];

			if (row['isStale'] == 'STALE') {
				rowClass = "staleRow";
			}

			var ovr = row['OVERRIDE_FIELDS'] == "YES" ? "OVR" : "";
			var ovrStr = ovr == "" ? "" : " (OVR)";
			buf.push("<tr class='" + rowClass + "'>" + genTelName(row)
					+ genFov(row, ovr) + ovrStr + genLaserImpacted(row, ovr)
					+ ovrStr + genLaserState(row, ovr) + ovrStr
					+ genTimeStamp(row, ovr) + showOverrideForm(row, ovr));
			i += 1;
		}
		buf.push("</table>");

		E("mainView").innerHTML = "<div id='statusLabel' >Status last updated: "
				+ self.getCurrTime() + "</div>" + buf.join("");

	};

	self.loadStatus = function() {
		var callback = function(data) {
			try {
				self.showStatus(data);
				self.checkServer("statusLabel", 1);
			} catch (e) {
				self.checkServer("statusLabel", 0);
			}
			self.callAgainIn(self.loadStatus, refreshRateMs);
		};

		var url = "getStatus";
		ajaxCall(url, {
			tel : 'all'
		}, callback);
	};

	self.saveOvrValues = function() {
		var callback = function(data) {
			self.showStatus(data);
		};

		var url = "saveOvrValues";
		ajaxPost(url, {
			tel : self.args['tel'],
			FOV : E('OVRFOV').value,
			LASER_IMPACTED : E('OVRLASER_IMPACTED').value,
			LASER_STATE : E('OVRLASER_STATE').value,
			LOG_DATA : E('OVRLOG_DATA').value,
			OVERRIDE_URL_FIELDS : E('OVERRIDE_FIELDS').value
		}, callback);
	};

	self.showOverride = function(data) {
		function genChoices(id, list) {
			var value = row[id];
			var buf1 = Array();
			var idx;
			for (idx in list) {
				var v = list[idx];
				var selected = value == v ? "selected" : "";
				buf1.push("<option value='" + v + "' " + selected + ">" + v);
			}
			return "<select id='" + id + "'>" + buf1.join("") + "</select>";
		}
		// data should contain only one row.
		var key;
		for (key in data) {
			break;
		}
		var row = data[key];
		var buf = Array();
		buf.push("Override:<br>");
		buf.push("<table id='ovrTable'>");
		buf.push("<tr><td align='right'>Telescope:<td>" + row['Telescope']);
		buf
				.push("<tr><td align='right'>Field of view:<td><input id='OVRFOV' columns='10' value='"
						+ row['OVRFOV'] + "'> deg");

		buf.push("<tr><td align='right'>Laser impacted:<td>"
				+ genChoices("OVRLASER_IMPACTED", [ "YES", "NO" ]));

		buf.push("<tr><td align='right'>Laser state:<td>"
				+ genChoices("OVRLASER_STATE", [ "ON", "ON-SKY", "OFF" ]));

		buf.push("<tr><td align='right'>Log data:<td>"
				+ genChoices("OVRLOG_DATA", [ "ON", "OFF" ]));

		buf.push("<tr><td align='right'>Override URL fields:<td>"
				+ genChoices("OVERRIDE_FIELDS", [ "YES", "NO" ]));

		buf.push("<tr><td>&nbsp;<td>");
		buf
				.push("<input type='button' class='ovrButton' id='ovrSave' value='Save'>");
		buf
				.push("<input type='button' class='ovrButton' id='ovrCancel' value='Cancel'>");

		buf.push("</table>");
		E("mainView").innerHTML = buf.join("");
		E('ovrSave').onclick = self.saveOvrValues;
		E('ovrCancel').onclick = self.loadStatus;
	};

	self.loadOverride = function() {
		var callback = function(data) {
			self.showOverride(data);
		};

		var url = "getStatus";
		ajaxCall(url, {
			tel : self.args['tel']
		}, callback);
	};

	self.loadPage = function(args) {
		if (self.timer != -99) {
			clearInterval(self.timer);
			self.timer = -99;
		}
		if (self.scenes) {
			self.scenes.stopRender();
			self.scenes = null;
		}
		return function() {
			window.location.assign(window.location.pathname + "?" + args);
		}
	};

	self.update3DScene = function() {
		var callback = function(data) {
			try {
				self.scenes.updateTelPositions(data);
				self.checkServer("lastUpdated", 1);
			} catch (e) {
				self.checkServer("lastUpdated", 0);
			}
			self.callAgainIn(self.update3DScene, refreshRateMs);
		};

		var url = "getStatus";
		var ajax;
		if (self.telPosAjax)
			ajax = self.telPosAjax;
		else {
			self.telPosAjax = new AjaxClass();
			ajax = self.telPosAjax;
		}

		ajax.sendRequest (url, {
			tel : 'all'
		}, callback);
	};

	self.loadView3D = function() {
		E("mainView").innerHTML = "<table><tr><td><div id='sceneContainer'></div>"
				+ "<td><div id='telTableDiv'></div></table>";
		self.scenes = new View3DScene("sceneContainer");
		self.update3DScene();
		self.scenes.render();
	};

	self.serverPerformance = function() {
		function callback(resp) {
			var cont = resp.responseText;
			var data;
			try {
				eval("data=" + cont + ";");
				E('rps').innerHTML = data['rps'] + ' req/s';
			} catch (e) {
				;
			}
		}
		function checkPerformance() {
			var ajax = new AjaxClass();
			ajax.sendRequest("getReqPerSec", {}, callback);
		}
		var sp = E("serverPerformance");
		if (!sp)
			return;
		sp.onmouseover = checkPerformance;
		sp.onmouseout = function() {
			E('rps').innerHTML = '';
		};
	};
	
	self.initViewerControl = function () {
		function handleViewer (data) {
			var az = Number(data['az']);
			var el = Number(data['el']);
			var dist = Number(data['dist']);
			self.scenes.setCameraPosition (dist, az, el);
			E('debugMsg').innerHTML = az + " " + el + " " + dist;
		}
		function checkViewer () {
			ajaxCall ("getViewerPosition", {}, handleViewer);
			timer = setTimeout (checkViewer, 1000);
		}
		function viewerControl () {
			oldGain =  self.scenes.cameraAnimGain;
			if (timer)
				clearTimeout(timer);
			if (vctrl.checked) {
				self.scenes.cameraAnimGain = 0.015;
				timer = setTimeout (checkViewer, 1000);				
			} else {
				self.scenes.cameraAnimGain = oldGain;
			}
		}
		var oldGain = 0.2;
		var timer = 0;
		var vctrl = E('viewerCtrl');
		vctrl.onclick = viewerControl;
	};

	
	self.serverPerformance();
	self.initViewerControl();

	E('Schedule').onclick = self.loadPage("c=h");
	E('Status').onclick = self.loadPage("c=s");
	E('View3D').onclick = self.loadPage("c=v");	

	self.args = splitArgs();

	var alist = {
		's' : self.loadStatus,
		'v' : self.loadView3D,
		'o' : self.loadOverride,
		'h' : self.loadSchedule
	};
	
	var a;
	var cmd = self.args['c'];
	if (alist[cmd]) {
		alist[cmd]();
		return;
	}

	self.loadSchedule();
}

var ltcsObj;

function initLtcs2() {
	ltcsObj = new ltcs2();
}